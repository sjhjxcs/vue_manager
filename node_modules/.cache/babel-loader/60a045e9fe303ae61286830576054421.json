{"remainingRequest":"/Users/sunchanglan/vue-manger/test_manger/node_modules/babel-loader/lib/index.js!/Users/sunchanglan/vue-manger/test_manger/src/api/mockServeData/user.js","dependencies":[{"path":"/Users/sunchanglan/vue-manger/test_manger/src/api/mockServeData/user.js","mtime":1647747111195},{"path":"/Users/sunchanglan/vue-manger/test_manger/babel.config.js","mtime":1647507147033},{"path":"/Users/sunchanglan/vue-manger/test_manger/node_modules/cache-loader/dist/cjs.js","mtime":1647483605847},{"path":"/Users/sunchanglan/vue-manger/test_manger/node_modules/babel-loader/lib/index.js","mtime":1647483606458}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKLy8gaW1wb3J0IHsgdHVybiB9IGZyb20gImNvcmUtanMvY29yZS9hcnJheSI7CmltcG9ydCBNb2NrIGZyb20gJ21vY2tqcyc7IC8vIGltcG9ydCB7IGNvbmZpZyB9IGZyb20gInZ1ZS90eXBlcy91bWQiOwovLyBnZXTor7fmsYLku45jb25maWcudXJs6I635Y+W5Y+C5pWw77yMcG9zdOS7jmNvbmZpZy5ib2R55Lit6I635Y+W5Y+C5pWwCgpmdW5jdGlvbiBwYXJhbTJPYmoodXJsKSB7CiAgdmFyIHNlYXJjaCA9IHVybC5zcGxpdCgnPycpWzFdOwoKICBpZiAoIXNlYXJjaCkgewogICAgcmV0dXJuIHt9OwogIH0KCiAgcmV0dXJuIEpTT04ucGFyc2UoJ3siJyArIGRlY29kZVVSSUNvbXBvbmVudChzZWFyY2gpLnJlcGxhY2UoLyIvZywgJ1xcIicpLnJlcGxhY2UoLyYvZywgJyIsIicpLnJlcGxhY2UoLz0vZywgJyI6IicpICsgJyJ9Jyk7Cn0KCnZhciBMaXN0ID0gW107CnZhciBjb3VudCA9IDIwMDsKCmZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogIExpc3QucHVzaChNb2NrLm1vY2soewogICAgaWQ6IE1vY2suUmFuZG9tLmd1aWQoKSwKICAgIG5hbWU6IE1vY2suUmFuZG9tLmNuYW1lKCksCiAgICBhZGRyOiBNb2NrLm1vY2soJ0Bjb3VudHkodHJ1ZSknKSwKICAgICdhZ2V8MTgtNjAnOiAxLAogICAgYmlydGg6IE1vY2suUmFuZG9tLmRhdGUoKSwKICAgIHNleDogTW9jay5SYW5kb20uaW50ZWdlcigwLCAxKQogIH0pKTsKfQoKZXhwb3J0IGRlZmF1bHQgewogIC8vIOiOt+WPluWIl+ihqAogIC8vIOimgeW4puWPguaVsG5hbWUscGFnZSxsaW1pdCxuYW1l5Y+v5Lul5LiN5aGr77yM5L2G5pivcGFnZSxsaW1pdOaciem7mOiupOWAvAogIC8vIEBwYXJhbSBuYW1lLHBhZ2UsbGltaXQKICAvLyBAcmV0dXJuIHt7Y29kZTpudW1iZXIsY291bnQ6bnVtYmVyLGRhdGE6KltdfX0KICBnZXRVc2VyTGlzdDogZnVuY3Rpb24gZ2V0VXNlckxpc3QoY29uZmlnKSB7CiAgICB2YXIgX3BhcmFtMk9iaiA9IHBhcmFtMk9iaihjb25maWcudXJsKSwKICAgICAgICBuYW1lID0gX3BhcmFtMk9iai5uYW1lLAogICAgICAgIF9wYXJhbTJPYmokcGFnZSA9IF9wYXJhbTJPYmoucGFnZSwKICAgICAgICBwYWdlID0gX3BhcmFtMk9iaiRwYWdlID09PSB2b2lkIDAgPyAxIDogX3BhcmFtMk9iaiRwYWdlLAogICAgICAgIF9wYXJhbTJPYmokbGltaXQgPSBfcGFyYW0yT2JqLmxpbWl0LAogICAgICAgIGxpbWl0ID0gX3BhcmFtMk9iaiRsaW1pdCA9PT0gdm9pZCAwID8gMjAgOiBfcGFyYW0yT2JqJGxpbWl0OwoKICAgIGNvbnNvbGUubG9nKCduYW1lOicgKyBuYW1lLCAncGFnZScgKyBwYWdlLCAn5YiG6aG15aSn5bCPbGltaXQnICsgbGltaXQpOwogICAgdmFyIG1vY2tMaXN0ID0gTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgaWYgKG5hbWUgJiYgdXNlci5uYW1lLmluZGV4T2YobmFtZSkgPT09IC0xICYmIHVzZXIuYWRkci5pbmRleE9mKG5hbWUpID09PSAtMSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9KTsKICAgIHZhciBwYWdlTGlzdCA9IG1vY2tMaXN0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHsKICAgICAgcmV0dXJuIGluZGV4IDwgbGltaXQgKiBwYWdlICYmIGluZGV4ID49IGxpbWl0ICogKHBhZ2UgLSAxKTsKICAgIH0pOwogICAgcmV0dXJuIHsKICAgICAgY29kZTogMjAwMDAsCiAgICAgIGNvdW50OiBtb2NrTGlzdC5sZW5ndGgsCiAgICAgIGxpc3Q6IHBhZ2VMaXN0CiAgICB9OwogIH0sCiAgLy8g5aKe5Yqg55So5oi3CiAgY3JlYXRlVXNlcjogZnVuY3Rpb24gY3JlYXRlVXNlcihjb25maWcpIHsKICAgIHZhciBfSlNPTiRwYXJzZSA9IEpTT04ucGFyc2UoY29uZmlnLmJvZHkpLAogICAgICAgIG5hbWUgPSBfSlNPTiRwYXJzZS5uYW1lLAogICAgICAgIGFkZHIgPSBfSlNPTiRwYXJzZS5hZGRyLAogICAgICAgIGFnZSA9IF9KU09OJHBhcnNlLmFnZSwKICAgICAgICBiaXJ0aCA9IF9KU09OJHBhcnNlLmJpcnRoLAogICAgICAgIHNleCA9IF9KU09OJHBhcnNlLnNleDsKCiAgICBjb25zb2xlLmxvZyhKU09OLnBhcnNlKGNvbmZpZy5ib2R5KSk7CiAgICBMaXN0LnVuc2hpZnQoewogICAgICBpZDogTW9jay5SYW5kb20uZ3VpZCgpLAogICAgICBuYW1lOiBuYW1lLAogICAgICBhZGRyOiBhZGRyLAogICAgICBhZ2U6IGFnZSwKICAgICAgYmlydGg6IGJpcnRoLAogICAgICBzZXg6IHNleAogICAgfSk7CiAgICBjb25zb2xlLmxvZygi5Yib5bu655So5oi35oiQ5Yqf5LmL5YmN55qE55qE5pWw5o2uIiwgTGlzdCk7CiAgICByZXR1cm4gewogICAgICBjb2RlOiAyMDAwMCwKICAgICAgZGF0YTogewogICAgICAgIG1lc3NhZ2U6ICfmt7vliqDmiJDlip8nCiAgICAgIH0KICAgIH07CiAgfSwKICAvL+WIoOmZpOeUqOaItwogIGRlbGV0ZVVzZXI6IGZ1bmN0aW9uIGRlbGV0ZVVzZXIoY29uZmlnKSB7CiAgICB2YXIgX3BhcmFtMk9iajIgPSBwYXJhbTJPYmooY29uZmlnLnVybCksCiAgICAgICAgaWQgPSBfcGFyYW0yT2JqMi5pZDsKCiAgICBpZiAoIWlkKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgY29kZTogLTk5OSwKICAgICAgICBtZXNzYWdlOiAn5Y+C5pWw5LiN5q2j56GuJwogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgTGlzdCA9IExpc3QuZmlsdGVyKGZ1bmN0aW9uICh1KSB7CiAgICAgICAgcmV0dXJuIHUuaWQgIT0gaWQ7CiAgICAgIH0pOwogICAgICByZXR1cm4gewogICAgICAgIGNvZGU6IDIwMDAwLAogICAgICAgIG1lc3NhZ2U6ICfliKDpmaTmiJDlip8nCiAgICAgIH07CiAgICB9CiAgfSwKICAvLyDkv67mlLnnlKjmiLcKICB1cGRhdGVVc2VyOiBmdW5jdGlvbiB1cGRhdGVVc2VyKGNvbmZpZykgewogICAgdmFyIF9KU09OJHBhcnNlMiA9IEpTT04ucGFyc2UoY29uZmlnLmJvZHkpLAogICAgICAgIGlkID0gX0pTT04kcGFyc2UyLmlkLAogICAgICAgIG5hbWUgPSBfSlNPTiRwYXJzZTIubmFtZSwKICAgICAgICBhZGRyID0gX0pTT04kcGFyc2UyLmFkZHIsCiAgICAgICAgYWdlID0gX0pTT04kcGFyc2UyLmFnZSwKICAgICAgICBiaXJ0aCA9IF9KU09OJHBhcnNlMi5iaXJ0aCwKICAgICAgICBzZXggPSBfSlNPTiRwYXJzZTIuc2V4OwoKICAgIHZhciBzZXhfbnVtID0gcGFyc2VJbnQoc2V4KTsKICAgIExpc3Quc29tZShmdW5jdGlvbiAodSkgewogICAgICBpZiAodS5pZCA9PT0gaWQpIHsKICAgICAgICB1Lm5hbWUgPSBuYW1lLCB1LmFkZHIgPSBhZGRyLCB1LmFnZSA9IGFnZSwgdS5iaXJ0aCA9IGJpcnRoLCB1LnNleCA9IHNleF9udW07CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHsKICAgICAgY29kZTogMjAwMCwKICAgICAgZGF0YTogewogICAgICAgIG1lc3NhZ2U6ICfnvJbovpHmiJDlip8nCiAgICAgIH0KICAgIH07CiAgfQp9Ow=="},{"version":3,"sources":["/Users/sunchanglan/vue-manger/test_manger/src/api/mockServeData/user.js"],"names":["Mock","param2Obj","url","search","split","JSON","parse","decodeURIComponent","replace","List","count","i","push","mock","id","Random","guid","name","cname","addr","birth","date","sex","integer","getUserList","config","page","limit","console","log","mockList","filter","user","indexOf","pageList","item","index","code","length","list","createUser","body","age","unshift","data","message","deleteUser","u","updateUser","sex_num","parseInt","some"],"mappings":"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","sourcesContent":["// import { turn } from \"core-js/core/array\";\nimport Mock from 'mockjs'\n// import { config } from \"vue/types/umd\";\n// get请求从config.url获取参数，post从config.body中获取参数\nfunction param2Obj(url) {\n    const search = url.split('?')[1]\n    if (!search) {\n        return {}\n    }\n    return JSON.parse(\n        '{\"' +\n        decodeURIComponent(search)\n            .replace(/\"/g, '\\\\\"')\n            .replace(/&/g, '\",\"')\n            .replace(/=/g, '\":\"') +\n        '\"}'\n    )\n}\nlet List = []\nconst count = 200\nfor (let i = 0; i < count; i++) {\n    List.push(\n        Mock.mock({\n            id: Mock.Random.guid(),\n            name: Mock.Random.cname(),\n            addr: Mock.mock('@county(true)'),\n            'age|18-60': 1,\n            birth: Mock.Random.date(),\n            sex: Mock.Random.integer(0, 1)\n        })\n    )\n}\nexport default {\n    // 获取列表\n    // 要带参数name,page,limit,name可以不填，但是page,limit有默认值\n    // @param name,page,limit\n    // @return {{code:number,count:number,data:*[]}}\n    getUserList: config => {\n        const { name, page = 1, limit = 20 } = param2Obj(config.url)\n        console.log('name:' + name, 'page' + page, '分页大小limit' + limit)\n        const mockList = List.filter(user => {\n            if (name && user.name.indexOf(name) === -1 && user.addr.indexOf(name) === -1) {\n                return false\n            }\n            return true\n        })\n        const pageList = mockList.filter((item, index) => index < limit * page && index >= limit * (page - 1))\n        return {\n            code: 20000,\n            count: mockList.length,\n            list: pageList\n        }\n    },\n\n    // 增加用户\n\n    createUser: config => {\n        const { name, addr, age, birth, sex } = JSON.parse(config.body)\n        console.log(JSON.parse(config.body))\n\n        List.unshift({\n            id: Mock.Random.guid(),\n            name: name,\n            addr: addr,\n            age: age,\n            birth: birth,\n            sex: sex\n        })\n        console.log(\"创建用户成功之前的的数据\",List)\n        return {\n            code: 20000,\n            data: {\n                message: '添加成功'\n            }\n        }\n\n    },\n    //删除用户\n    deleteUser: config => {\n        const { id } = param2Obj(config.url)\n        if (!id) {\n            return {\n                code: -999,\n                message: '参数不正确'\n            }\n        } else {\n            List = List.filter(u => u.id != id)\n            return {\n                code: 20000,\n                message: '删除成功'\n            }\n        }\n    },\n\n    // 修改用户\n    updateUser: config => {\n        const { id, name, addr, age, birth, sex } = JSON.parse(config.body)\n        const sex_num = parseInt(sex)\n        List.some(u => {\n            if (u.id === id) {\n                u.name = name,\n                    u.addr = addr,\n                    u.age = age,\n                    u.birth = birth,\n                    u.sex = sex_num\n                return true\n            }\n        })\n        return {\n            code: 2000,\n            data: {\n                message: '编辑成功',\n\n            }\n        }\n    }\n\n}\n"]}]}